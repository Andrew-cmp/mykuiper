// MIT License
// Copyright (c) 2022 - 傅莘莘
// Source URL: https://github.com/zjhellofss/KuiperInfer
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Created by fss on 22-11-12.

#ifndef KUIPER_INFER_DATA_BLOB_HPP_
#define KUIPER_INFER_DATA_BLOB_HPP_
#include <glog/logging.h>
#include <armadillo>
#include <memory>
#include <numeric>
#include <vector>

namespace my_kuiper {
template <typename T>
class Tensor {
 public:
  explicit Tensor(T* raw_ptr, uint32_t size);
  explicit Tensor(T* raw_ptr, uint32_t rows, uint32_t cols);
  explicit Tensor(T* raw_ptr, uint32_t channels, uint32_t rows, uint32_t cols);
  explicit Tensor(T* raw_ptr, const std::vector<uint32_t>& shapes);
  explicit Tensor() = default;
  explicit Tensor(uint32_t size);
  explicit Tensor(uint32_t rows, uint32_t cols);
  explicit Tensor(uint32_t channels, uint32_t rows, uint32_t cols);
  explicit Tensor(const std::vector<uint32_t>& shapes);

  uint32_t rows() const;
  uint32_t cols() const;
  uint32_t channels() const;

  size_t size() const;

  size_t plane_size() const;

  void set_data(const arma::Cube<T>& data);
  bool empty() const;

  T& index(uint32_t offset);

  const T index(uint32_t offset) const;

  std::vector<uint32_t> shapes() const;

  const std::vector<uint32_t>& raw_shapes() const;

  arma::Cube<T>& data();

  const arma::Cube<T>& data() const;

  arma::Mat<T>& slice(uint32_t channel);

  const arma::Mat<T>& slice(uint32_t channel) const;

  const T at(uint32_t channel, uint32_t row, uint32_t col) const;

  T& at(uint32_t channel, uint32_t row, uint32_t col);

  void Padding(const std::vector<uint32_t>& pads, T padding_value);

  void Fill(T value);

  void Fill(const std::vector<T>& values, bool row_major = true);

  std::vector<T> values(bool row_major = true);

  void Ones();

  void RandN(T mean = 0, T var = 1);

  void RandU(T min = 0, T max = 1);

  void Show();

  void Reshape(const std::vector<uint32_t>& shapes, bool row_major = false);

  void Flatten(bool row_major = false);

  void Transform(const std::function<T(T)>& filter);


  T* raw_ptr();

  const T* raw_ptr() const;

  T* raw_ptr(size_t offset);
  const T* raw_ptr(size_t offset) const;
  T* matrix_raw_ptr(uint32_t index);
  const T* matrix_raw_ptr(uint32_t index) const;

 private:
  void Review(const std::vector<uint32_t>& shapes);

  /// Raw tensor dimensions
  std::vector<uint32_t> raw_shapes_;

  /// Tensor data
  arma::Cube<T> data_;
};

template <typename T = float>
using stensor = std::shared_ptr<Tensor<T>>;

using ftensor = Tensor<float>;
using sftensor = std::shared_ptr<Tensor<float>>;

using u1tensor = Tensor<uint8_t>;
using su1tensor = std::shared_ptr<Tensor<uint8_t>>;

}  // namespace kuiper_infer

#endif  // KUIPER_INFER_DATA_BLOB_HPP_
